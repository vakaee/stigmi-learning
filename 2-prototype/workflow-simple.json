{
  "name": "AI Tutor (Simple Test)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "tutor-test",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "tutor-test"
    },
    {
      "parameters": {
        "functionCode": "// Extract input data\nconst studentInput = $input.item.json.message;\nconst correctAnswer = $input.item.json.current_problem.correct_answer;\n\n// Simple verification using JavaScript\nconst isCorrect = studentInput.trim() === correctAnswer.trim();\n\nreturn {\n  json: {\n    student_input: studentInput,\n    correct_answer: correctAnswer,\n    is_correct: isCorrect,\n    category: isCorrect ? 'correct' : 'wrong',\n    problem: $input.item.json.current_problem.text\n  }\n};"
      },
      "id": "verify-answer",
      "name": "Verify Answer",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.category}}",
              "operation": "equals",
              "value2": "correct"
            }
          ]
        }
      },
      "id": "check-if-correct",
      "name": "If Correct",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-4o-mini",
        "messages": {
          "values": [
            {
              "role": "user",
              "content": "=The student answered correctly! The problem was: {{$json.problem}}\nTheir answer: {{$json.student_input}}\n\nRespond with 1-2 sentences:\n1. Celebrate briefly (\"Great!\", \"Perfect!\")\n2. Ask them to explain their reasoning\n\nBe encouraging and warm."
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 100
        }
      },
      "id": "response-correct",
      "name": "Response: Correct",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [850, 200],
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIAL_ID",
          "name": "OpenAI Account"
        }
      }
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-4o-mini",
        "messages": {
          "values": [
            {
              "role": "user",
              "content": "=The student answered incorrectly. The problem was: {{$json.problem}}\nCorrect answer: {{$json.correct_answer}}\nTheir answer: {{$json.student_input}}\n\nRespond with 1-2 sentences:\n1. Be patient and encouraging\n2. Ask a Socratic question to guide them\n3. Do NOT give the answer\n\nUse concrete examples like number lines or real objects."
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 150
        }
      },
      "id": "response-wrong",
      "name": "Response: Wrong",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [850, 400],
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIAL_ID",
          "name": "OpenAI Account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Get the response from OpenAI\nconst response = $input.item.json.message?.content || $input.item.json.text || \"I'm here to help!\";\n\n// Build the final response\nreturn {\n  json: {\n    response: response,\n    metadata: {\n      category: $('Verify Answer').item.json.category,\n      is_correct: $('Verify Answer').item.json.is_correct,\n      timestamp: new Date().toISOString()\n    }\n  }\n};"
      },
      "id": "format-response",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "respond-to-webhook",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1250, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Verify Answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify Answer": {
      "main": [
        [
          {
            "node": "If Correct",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Correct": {
      "main": [
        [
          {
            "node": "Response: Correct",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response: Wrong",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response: Correct": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response: Wrong": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-10T00:00:00.000Z",
  "versionId": "1"
}
