{
  "name": "AI Tutor (Complete)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "tutor/message",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 500],
      "webhookId": "tutor-message"
    },
    {
      "parameters": {
        "functionCode": "// Initialize or load session from static data\nconst sessionId = $input.item.json.session_id;\nconst studentId = $input.item.json.student_id;\nconst currentProblem = $input.item.json.current_problem;\n\n// Get existing sessions from workflow static data (or initialize empty)\nconst sessions = $getWorkflowStaticData('global')?.sessions || {};\n\nlet session = sessions[sessionId];\n\nif (!session) {\n  // Create new session\n  session = {\n    session_id: sessionId,\n    student_id: studentId,\n    created_at: new Date().toISOString(),\n    last_active: new Date().toISOString(),\n    current_problem: {\n      id: currentProblem.id,\n      text: currentProblem.text,\n      correct_answer: currentProblem.correct_answer,\n      attempt_count: 0\n    },\n    recent_turns: [],\n    concepts_taught: [],\n    stats: {\n      total_turns: 0,\n      problems_attempted: 1,\n      problems_solved: 0\n    }\n  };\n}\n\n// Check if problem changed\nif (session.current_problem.id !== currentProblem.id) {\n  session.current_problem = {\n    id: currentProblem.id,\n    text: currentProblem.text,\n    correct_answer: currentProblem.correct_answer,\n    attempt_count: 0\n  };\n  session.stats.problems_attempted++;\n}\n\nreturn {\n  json: {\n    ...$ input.item.json,\n    session: session,\n    _session_id: sessionId\n  }\n};"
      },
      "id": "load-session",
      "name": "Load Session",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 500]
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-4o-mini",
        "messages": {
          "values": [
            {
              "role": "user",
              "content": "=Is this student input an answer attempt to the problem, or something else?\n\nProblem: {{$json.current_problem.text}}\nStudent input: \"{{$json.message}}\"\n\nRespond with JSON only:\n{\n  \"is_answer\": true/false,\n  \"confidence\": 0.0-1.0\n}\n\nExamples:\n\"2\" → {\"is_answer\": true, \"confidence\": 0.99}\n\"I don't know\" → {\"is_answer\": false, \"confidence\": 0.95}\n\"What is a negative number?\" → {\"is_answer\": false, \"confidence\": 0.98}"
            }
          ]
        },
        "options": {
          "temperature": 0.1,
          "maxTokens": 50
        }
      },
      "id": "stage1-triage",
      "name": "Stage 1: Is Answer?",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [650, 500],
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIAL_ID",
          "name": "OpenAI Account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Parse LLM response\nconst llmResponse = $input.item.json.message?.content || $input.item.json.text || '{}';\nlet triageResult;\n\ntry {\n  triageResult = JSON.parse(llmResponse);\n} catch (e) {\n  // Fallback: try to detect if it's an answer\n  const message = $('Webhook Trigger').item.json.message;\n  const isNumeric = /^-?\\d+\\.?\\d*$/.test(message.trim());\n  triageResult = {\n    is_answer: isNumeric,\n    confidence: 0.7\n  };\n}\n\nreturn {\n  json: {\n    ...$('Webhook Trigger').item.json,\n    session: $('Load Session').item.json.session,\n    triage_stage1: triageResult,\n    is_answer: triageResult.is_answer\n  }\n};"
      },
      "id": "parse-triage",
      "name": "Parse Triage Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 500]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.is_answer}}",
              "value2": true
            }
          ]
        }
      },
      "id": "if-answer",
      "name": "If Answer",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 500]
    },
    {
      "parameters": {
        "functionCode": "// Verify answer using math evaluation\nconst studentInput = $input.item.json.message;\nconst correctAnswer = $input.item.json.current_problem.correct_answer;\n\nfunction verifyAnswer(studentInput, correctAnswer) {\n  try {\n    // Clean input\n    let cleaned = studentInput.trim().toLowerCase();\n    \n    // Handle written numbers\n    const numberWords = {\n      'zero': '0', 'one': '1', 'two': '2', 'three': '3',\n      'four': '4', 'five': '5', 'six': '6', 'seven': '7',\n      'eight': '8', 'nine': '9', 'ten': '10',\n      'negative': '-', 'minus': '-'\n    };\n    \n    for (let [word, digit] of Object.entries(numberWords)) {\n      const regex = new RegExp('\\\\b' + word + '\\\\b', 'g');\n      cleaned = cleaned.replace(regex, digit);\n    }\n    \n    cleaned = cleaned.replace(/\\s+/g, '');\n    \n    // Simple evaluation for numbers\n    const studentVal = parseFloat(eval(cleaned));\n    const correctVal = parseFloat(eval(correctAnswer));\n    \n    const diff = Math.abs(studentVal - correctVal);\n    const tolerance = 0.001;\n    const closeThreshold = Math.max(Math.abs(correctVal * 0.2), 0.5);\n    \n    return {\n      correct: diff < tolerance,\n      close: diff >= tolerance && diff < closeThreshold,\n      student_value: studentVal,\n      correct_value: correctVal,\n      difference: diff\n    };\n  } catch (error) {\n    return {\n      correct: false,\n      close: false,\n      error: \"Could not parse\",\n      raw_input: studentInput\n    };\n  }\n}\n\nconst verification = verifyAnswer(studentInput, correctAnswer);\n\nreturn {\n  json: {\n    ...$input.item.json,\n    verification: verification\n  }\n};"
      },
      "id": "verify-answer",
      "name": "Verify Answer",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 400]
    },
    {
      "parameters": {
        "functionCode": "// Stage 2a: Classify answer quality based on verification\nconst verification = $input.item.json.verification;\n\nlet category, confidence;\n\nif (verification.correct) {\n  category = 'correct';\n  confidence = 0.99;\n} else if (verification.close) {\n  category = 'close';\n  confidence = 0.95;\n} else {\n  category = 'wrong_operation';\n  confidence = 0.85;\n}\n\nreturn {\n  json: {\n    ...$input.item.json,\n    category: category,\n    confidence: confidence,\n    stage: 'stage2a'\n  }\n};"
      },
      "id": "classify-answer",
      "name": "Stage 2a: Answer Quality",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 400]
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-4o-mini",
        "messages": {
          "values": [
            {
              "role": "user",
              "content": "=The student is NOT giving an answer. What are they doing?\n\nProblem: {{$json.current_problem.text}}\nStudent input: \"{{$json.message}}\"\n\nClassify as ONE:\n- conceptual_question: Asking what a concept means\n- stuck: Asking for help or saying they don't know\n- off_topic: Unrelated to the problem\n\nRespond with JSON only:\n{\n  \"category\": \"one of above\",\n  \"confidence\": 0.0-1.0\n}"
            }
          ]
        },
        "options": {
          "temperature": 0.1,\n          \"maxTokens\": 100
        }
      },
      "id": "stage2b-triage",
      "name": "Stage 2b: Non-Answer Intent",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [1250, 600],
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIAL_ID",
          "name": "OpenAI Account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Parse Stage 2b result\nconst llmResponse = $input.item.json.message?.content || $input.item.json.text || '{}';\nlet triageResult;\n\ntry {\n  triageResult = JSON.parse(llmResponse);\n} catch (e) {\n  // Fallback\n  const message = $('Webhook Trigger').item.json.message.toLowerCase();\n  if (message.includes('what') || message.includes('?')) {\n    triageResult = { category: 'conceptual_question', confidence: 0.7 };\n  } else if (message.includes('don\\'t know') || message.includes('help')) {\n    triageResult = { category: 'stuck', confidence: 0.8 };\n  } else {\n    triageResult = { category: 'off_topic', confidence: 0.6 };\n  }\n}\n\nreturn {\n  json: {\n    ...$('Parse Triage Result').item.json,\n    category: triageResult.category,\n    confidence: triageResult.confidence,\n    stage: 'stage2b'\n  }\n};"
      },
      "id": "parse-stage2b",
      "name": "Parse Stage 2b",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 600]
    },
    {
      "parameters": {
        "functionCode": "// Enrich context with attempt count and escalation level\nconst session = $input.item.json.session;\nconst category = $input.item.json.category;\nconst isAnswer = $input.item.json.is_answer;\n\n// Get attempt count\nconst attemptCount = session.current_problem.attempt_count + (isAnswer ? 1 : 0);\n\n// Determine escalation level\nlet escalationLevel;\nif (attemptCount <= 1) {\n  escalationLevel = 'probe';\n} else if (attemptCount === 2) {\n  escalationLevel = 'hint';\n} else {\n  escalationLevel = 'teach';\n}\n\n// Format chat history\nconst chatHistory = session.recent_turns.map((turn, i) => {\n  return `Turn ${i + 1}:\\nStudent: \"${turn.student_input}\"\\nTutor: \"${turn.tutor_response}\"`;\n}).join('\\n\\n');\n\nreturn {\n  json: {\n    ...$input.item.json,\n    attempt_count: attemptCount,\n    escalation_level: escalationLevel,\n    chat_history: chatHistory\n  }\n};"
      },
      "id": "enrich-context",
      "name": "Enrich Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 500]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{$json.category}}",
                    "operation": "equals",
                    "value2": "correct"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "correct"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{$json.category}}",
                    "operation": "equals",
                    "value2": "close"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "close"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{$json.category}}",
                    "operation": "equals",
                    "value2": "wrong_operation"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "wrong_operation"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{$json.category}}",
                    "operation": "equals",
                    "value2": "conceptual_question"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "conceptual_question"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{$json.category}}",
                    "operation": "equals",
                    "value2": "stuck"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "stuck"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{$json.category}}",
                    "operation": "equals",
                    "value2": "off_topic"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "off_topic"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "route-category",
      "name": "Route by Category",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [1850, 500]
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-4o-mini",
        "messages": {
          "values": [
            {
              "role": "user",
              "content": "=You are an encouraging math tutor. The student just gave the CORRECT answer.\n\nProblem: {{$json.current_problem.text}}\nStudent's answer: {{$json.message}} ✓ CORRECT\nThis is attempt #{{$json.attempt_count}}\n\n{% if $json.chat_history %}\nRecent conversation:\n{{$json.chat_history}}\n{% endif %}\n\nYour goal: Get them to explain their reasoning (teach-back method).\n\n{% if $json.attempt_count == 1 %}\nThey got it right on the first try! Ask them to walk you through their thinking.\n{% else %}\nThey worked through it and got there! Ask them to explain how they figured it out.\n{% endif %}\n\nRules:\n- Celebrate their success briefly (1-2 words: \"Perfect!\", \"Excellent!\")\n- Ask them to explain their reasoning in their own words\n- 1-2 sentences total\n- Encouraging, warm tone\n\nYour response:"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 150
        }
      },
      "id": "response-correct",
      "name": "Response: Correct",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [2050, 200],
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIAL_ID",
          "name": "OpenAI Account"
        }
      }
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-4o-mini",
        "messages": {
          "values": [
            {
              "role": "user",
              "content": "=You are a patient math tutor using Socratic questioning.\n\nProblem: {{$json.current_problem.text}}\nStudent's answer: {{$json.message}} (incorrect but close to {{$json.current_problem.correct_answer}})\nThis is attempt #{{$json.attempt_count}}\n\n{% if $json.chat_history %}\nRecent conversation:\n{{$json.chat_history}}\n{% endif %}\n\n{% if $json.attempt_count == 1 %}\nGive a gentle probing question to help them spot their small error.\n{% elif $json.attempt_count == 2 %}\nGive a more explicit hint about where the error is.\n{% else %}\nThey've tried 3+ times. Walk through one step explicitly, then let them finish.\n{% endif %}\n\nRules:\n- 1-2 sentences maximum\n- Ask, don't tell (unless attempt 3+)\n- Use concrete examples (number line, objects, drawings)\n- Encouraging, patient tone\n- DO NOT give the final answer\n\nYour response:"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 150
        }
      },
      "id": "response-close",
      "name": "Response: Close",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [2050, 320],
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIAL_ID",
          "name": "OpenAI Account"
        }
      }
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-4o-mini",
        "messages": {
          "values": [
            {
              "role": "user",
              "content": "=You are a patient math tutor. The student's answer suggests they misunderstood the operation or concept.\n\nProblem: {{$json.current_problem.text}}\nStudent's answer: {{$json.message}} (should be {{$json.current_problem.correct_answer}})\nThis is attempt #{{$json.attempt_count}}\n\n{% if $json.chat_history %}\nRecent conversation:\n{{$json.chat_history}}\n{% endif %}\n\n{% if $json.attempt_count == 1 %}\nAsk a clarifying question about the operation or concept.\n{% elif $json.attempt_count == 2 %}\nGive a more direct hint about the operation or concept.\n{% else %}\nThey've tried 3+ times. Teach the concept directly with an example, then ask them to try.\n{% endif %}\n\nRules:\n- Focus on the specific misconception\n- Use concrete examples (number line, real-world objects)\n- 2-3 sentences for teaching (attempt 3+), 1 sentence for questions (attempts 1-2)\n- Patient, non-judgmental tone\n\nYour response:"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 200
        }
      },
      "id": "response-wrong",
      "name": "Response: Wrong Operation",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [2050, 440],
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIAL_ID",
          "name": "OpenAI Account"
        }
      }
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-4o-mini",
        "messages": {
          "values": [
            {
              "role": "user",
              "content": "=You are a patient math tutor. The student is asking a conceptual question.\n\nProblem: {{$json.current_problem.text}}\nStudent's question: \"{{$json.message}}\"\n\n{% if $json.chat_history %}\nRecent conversation:\n{{$json.chat_history}}\n{% endif %}\n\nYour goal: Teach the concept using simple, concrete examples.\n\nTeaching strategy:\n1. Give a brief, simple definition (1 sentence)\n2. Provide a concrete example (number line, real-world scenario)\n3. Ask a check question to see if they understood\n\nRules:\n- Use age-appropriate language\n- Concrete examples (number line for negatives, pizza slices for fractions, etc.)\n- 2-3 sentences total\n- End with a simple check question related to the original problem\n- Encouraging tone\n\nYour response:"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 200
        }
      },
      "id": "response-conceptual",
      "name": "Response: Conceptual",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [2050, 560],
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIAL_ID",
          "name": "OpenAI Account"
        }
      }
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-4o-mini",
        "messages": {
          "values": [
            {
              "role": "user",
              "content": "=You are a patient math tutor. The student is stuck or asking for help.\n\nProblem: {{$json.current_problem.text}}\nThis is attempt #{{$json.attempt_count}}\n\n{% if $json.chat_history %}\nRecent conversation:\n{{$json.chat_history}}\n{% endif %}\n\nYour goal: Break the problem into smaller, manageable steps.\n\n{% if $json.attempt_count == 1 %}\nStart with the very first step and ask them to do just that one step.\n{% elif $json.attempt_count == 2 %}\nGive them the first step, then ask them to do the second step.\n{% else %}\nThey've tried multiple times. Walk through most of the problem step-by-step, leaving only the final step for them.\n{% endif %}\n\nRules:\n- Break into the smallest possible next step\n- 1-2 sentences\n- Encouraging tone (\"Let's...\", \"We can...\")\n- Ask a specific, focused question\n\nYour response:"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 200
        }
      },
      "id": "response-stuck",
      "name": "Response: Stuck",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [2050, 680],
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIAL_ID",
          "name": "OpenAI Account"
        }
      }
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-4o-mini",
        "messages": {
          "values": [
            {
              "role": "user",
              "content": "=You are a friendly but focused math tutor. The student went off-topic.\n\nProblem: {{$json.current_problem.text}}\nStudent said: \"{{$json.message}}\" (unrelated to the problem)\n\nYour goal: Politely redirect them back to the math problem.\n\nRules:\n- Acknowledge their input very briefly (1-2 words if appropriate)\n- Gently redirect to the problem\n- 1 sentence total\n- Warm, friendly tone (not scolding)\n- Re-state the problem or ask them to focus\n\nYour response:"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 100
        }
      },
      "id": "response-offtopic",
      "name": "Response: Off-Topic",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [2050, 800],
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIAL_ID",
          "name": "OpenAI Account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Extract response from OpenAI\nconst llmOutput = $input.item.json;\nconst response = llmOutput.message?.content || llmOutput.text || \"I'm here to help!\";\n\n// Get data from previous nodes\nconst enrichContext = $('Enrich Context').item.json;\nconst startTime = Date.now() - 3000; // Approximate\nconst latency = Date.now() - startTime;\n\n// Build turn object\nconst turn = {\n  student_input: enrichContext.message,\n  is_answer: enrichContext.is_answer,\n  category: enrichContext.category,\n  verification: enrichContext.verification || null,\n  tutor_response: response,\n  latency_ms: latency,\n  timestamp: new Date().toISOString()\n};\n\n// Update session\nconst session = enrichContext.session;\n\n// Increment attempt count if was an answer\nif (enrichContext.is_answer) {\n  session.current_problem.attempt_count++;\n}\n\n// Mark problem solved if correct\nif (enrichContext.category === 'correct') {\n  session.stats.problems_solved++;\n}\n\n// Add turn to recent history\nsession.recent_turns.push(turn);\n\n// Trim to last 5 turns\nif (session.recent_turns.length > 5) {\n  session.recent_turns = session.recent_turns.slice(-5);\n}\n\n// Update metadata\nsession.last_active = new Date().toISOString();\nsession.stats.total_turns++;\n\n// Save session to workflow static data\nconst sessions = $getWorkflowStaticData('global')?.sessions || {};\nsessions[enrichContext._session_id] = session;\n$setWorkflowStaticData('global', { sessions });\n\n// Return response\nreturn {\n  json: {\n    response: response,\n    metadata: {\n      category: enrichContext.category,\n      confidence: enrichContext.confidence,\n      is_answer: enrichContext.is_answer,\n      verification: enrichContext.verification,\n      attempt_count: session.current_problem.attempt_count,\n      escalation_level: enrichContext.escalation_level,\n      latency_ms: latency,\n      timestamp: new Date().toISOString()\n    }\n  }\n};"
      },
      "id": "update-session",
      "name": "Update Session & Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2250, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2450, 500]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [[{"node": "Load Session", "type": "main", "index": 0}]]
    },
    "Load Session": {
      "main": [[{"node": "Stage 1: Is Answer?", "type": "main", "index": 0}]]
    },
    "Stage 1: Is Answer?": {
      "main": [[{"node": "Parse Triage Result", "type": "main", "index": 0}]]
    },
    "Parse Triage Result": {
      "main": [[{"node": "If Answer", "type": "main", "index": 0}]]
    },
    "If Answer": {
      "main": [
        [{"node": "Verify Answer", "type": "main", "index": 0}],
        [{"node": "Stage 2b: Non-Answer Intent", "type": "main", "index": 0}]
      ]
    },
    "Verify Answer": {
      "main": [[{"node": "Stage 2a: Answer Quality", "type": "main", "index": 0}]]
    },
    "Stage 2a: Answer Quality": {
      "main": [[{"node": "Enrich Context", "type": "main", "index": 0}]]
    },
    "Stage 2b: Non-Answer Intent": {
      "main": [[{"node": "Parse Stage 2b", "type": "main", "index": 0}]]
    },
    "Parse Stage 2b": {
      "main": [[{"node": "Enrich Context", "type": "main", "index": 0}]]
    },
    "Enrich Context": {
      "main": [[{"node": "Route by Category", "type": "main", "index": 0}]]
    },
    "Route by Category": {
      "main": [
        [{"node": "Response: Correct", "type": "main", "index": 0}],
        [{"node": "Response: Close", "type": "main", "index": 0}],
        [{"node": "Response: Wrong Operation", "type": "main", "index": 0}],
        [{"node": "Response: Conceptual", "type": "main", "index": 0}],
        [{"node": "Response: Stuck", "type": "main", "index": 0}],
        [{"node": "Response: Off-Topic", "type": "main", "index": 0}]
      ]
    },
    "Response: Correct": {
      "main": [[{"node": "Update Session & Format Response", "type": "main", "index": 0}]]
    },
    "Response: Close": {
      "main": [[{"node": "Update Session & Format Response", "type": "main", "index": 0}]]
    },
    "Response: Wrong Operation": {
      "main": [[{"node": "Update Session & Format Response", "type": "main", "index": 0}]]
    },
    "Response: Conceptual": {
      "main": [[{"node": "Update Session & Format Response", "type": "main", "index": 0}]]
    },
    "Response: Stuck": {
      "main": [[{"node": "Update Session & Format Response", "type": "main", "index": 0}]]
    },
    "Response: Off-Topic": {
      "main": [[{"node": "Update Session & Format Response", "type": "main", "index": 0}]]
    },
    "Update Session & Format Response": {
      "main": [[{"node": "Webhook Response", "type": "main", "index": 0}]]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "global": {
      "sessions": {}
    }
  },
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-10T00:00:00.000Z",
  "versionId": "1"
}
