{
  "name": "Stigmi",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hi there! \ud83d\udc4b\n\nMy name is Nathan. Ready to learn math?\nHere's your first problem:\nWhat is -3 + 5?",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        1072,
        2256
      ],
      "id": "ce6a99ec-5d06-40f9-8dc6-61a39540cb11",
      "name": "When chat message received",
      "webhookId": "d6075ce6-263d-4b56-82b1-de4f2f013f73"
    },
    {
      "parameters": {},
      "id": "8b59b5ab-16f5-444e-907a-521e9499193c",
      "name": "Debug: Execution Data",
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        3184,
        2560
      ],
      "notes": "DEBUG: Captures execution data for troubleshooting"
    },
    {
      "parameters": {},
      "id": "9d05a2ee-005e-4fc9-85fc-1a9a06a76692",
      "name": "Debug: Before Response",
      "type": "n8n-nodes-base.executionData",
      "typeVersion": 1,
      "position": [
        3776,
        2672
      ],
      "notes": "DEBUG: Captures data going INTO Response: Unified"
    },
    {
      "parameters": {
        "options": {
          "maxTokens": 500,
          "temperature": 0.2
        }
      },
      "id": "c99e40fb-cd61-4710-a68d-b0c12b05366a",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2848,
        2496
      ],
      "credentials": {
        "openAiApi": {
          "id": "IsfTAJGtC8cYJaRq",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format verification result for Build Response Context\nconst inputData = $input.first();\nconst verificationResult = inputData.json.verification_result;\n\n// Map teach_back_explanation to stuck for routing (same as Parse Agent Output does for scaffolding)\nlet category = verificationResult.category;\nif (category === 'teach_back_explanation') {\n  category = 'stuck';\n}\n\nreturn {\n  json: {\n    category: category,\n    confidence: verificationResult.confidence,\n    is_main_problem_attempt: verificationResult.is_main_problem_attempt,\n    verification: null,\n    agent_reasoning: verificationResult.reasoning,\n    tool_used: 'llm_classify_verify',\n    original_category: verificationResult.category\n  }\n};"
      },
      "id": "b651161a-e349-42d1-9fdc-7b3e062431d5",
      "name": "Format for Routing1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2960,
        2960
      ],
      "notes": "Formats verification result to match Build Response Context expectations"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.is_scaffolding_active }}",
                    "rightValue": true,
                    "operator": {
                      "type": "boolean",
                      "operation": "true"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "scaffolding_active"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "6cecd54e-6909-439a-a347-d27a2fcd17ad",
      "name": "Switch: Scaffolding Active?1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        2640,
        2368
      ],
      "notes": "Routes to AI Agent only if scaffolding is active"
    },
    {
      "parameters": {
        "jsCode": "// Parse LLM extraction and merge with code verification\nconst llmData = $('Code: Verify Answer1').first().json;\nconst contextData = $('Prepare Agent Context1').first().json;\n\nreturn {\n  json: {\n    student_message: contextData.student_message,\n    current_problem: contextData.current_problem,\n    attempt_count: contextData.attempt_count,\n    is_scaffolding_active: contextData.is_scaffolding_active,\n    scaffolding_depth: contextData.scaffolding_depth,\n    scaffolding_last_question: contextData.scaffolding_last_question,\n    is_teach_back_active: contextData.is_teach_back_active,\n    teach_back_awaiting: contextData.teach_back_awaiting,\n    last_tutor_question: contextData.last_tutor_question,\n    last_category: contextData.last_category,\n    session_id: contextData.session_id,\n    student_id: contextData.student_id,\n    _session: contextData._session,\n    _start_time: contextData._start_time,\n    verification_result: {\n      category: llmData.final_category,\n      is_main_problem_attempt: llmData.is_main_problem_attempt,\n      confidence: llmData.confidence,\n      reasoning: llmData.reasoning\n    }\n  }\n};"
      },
      "id": "6e86872a-c522-40f7-9d32-1f4d4cc1e678",
      "name": "Parse Classification1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2464,
        2368
      ],
      "notes": "Merges LLM extraction with code verification results"
    },
    {
      "parameters": {
        "jsCode": "// Code-based answer verification (Stage 2)\nconst inputData = $input.first();\nconst llmResponse = inputData.json.message?.content || inputData.json.text || '';\nconst contextData = $('Prepare Agent Context1').first().json;\n\nlet llmExtraction;\ntry {\n  llmExtraction = JSON.parse(llmResponse);\n  \n  if (!llmExtraction.category) {\n    throw new Error('Missing category field');\n  }\n} catch (error) {\n  // Fallback if JSON parsing fails\n  llmExtraction = {\n    is_answer: false,\n    category: 'stuck',\n    extracted_value: null,\n    confidence: 0.5,\n    reasoning: `Parse error: ${error.message}`\n  };\n}\n\n// If not an answer attempt, pass through unchanged\nif (!llmExtraction.is_answer) {\n  return {\n    json: {\n      final_category: llmExtraction.category,\n      is_main_problem_attempt: false,\n      confidence: llmExtraction.confidence,\n      reasoning: llmExtraction.reasoning,\n      extracted_value: null\n    }\n  };\n}\n\n// Answer attempt - verify numerically\nconst studentValue = llmExtraction.extracted_value;\nconst correctAnswer = contextData.current_problem.correct_answer;\n\n// Parse correct answer\nlet correctValue;\ntry {\n  correctValue = parseFloat(String(correctAnswer).replace(/[^0-9.\\-]/g, ''));\n  if (isNaN(correctValue)) {\n    throw new Error('Cannot parse correct answer');\n  }\n} catch (error) {\n  // Cannot verify - treat as stuck\n  return {\n    json: {\n      final_category: 'stuck',\n      is_main_problem_attempt: false,\n      confidence: 0.5,\n      reasoning: `Verification error: ${error.message}`,\n      extracted_value: studentValue\n    }\n  };\n}\n\n// Check if extracted value is valid\nif (studentValue === null || isNaN(studentValue)) {\n  return {\n    json: {\n      final_category: 'stuck',\n      is_main_problem_attempt: false,\n      confidence: llmExtraction.confidence,\n      reasoning: 'Could not extract numeric value from student response',\n      extracted_value: null\n    }\n  };\n}\n\n// Numeric comparison\nconst diff = Math.abs(studentValue - correctValue);\nconst percentThreshold = Math.abs(correctValue * 0.2); // 20%\nconst closeThreshold = Math.max(percentThreshold, 0.3); // At least 0.3\n\nconst isCorrect = diff < 0.001;\nconst isClose = !isCorrect && diff <= closeThreshold;\n\nlet finalCategory;\nif (isCorrect) {\n  finalCategory = 'correct';\n} else if (isClose) {\n  finalCategory = 'close';\n} else {\n  finalCategory = 'wrong_operation';\n}\n\nreturn {\n  json: {\n    final_category: finalCategory,\n    is_main_problem_attempt: true,\n    confidence: llmExtraction.confidence,\n    reasoning: `Extracted ${studentValue}, correct is ${correctValue}, diff ${diff.toFixed(2)}`,\n    extracted_value: studentValue,\n    correct_value: correctValue,\n    difference: diff\n  }\n};"
      },
      "id": "06c4ded1-7130-47f4-ba2a-f8f4c33c75d7",
      "name": "Code: Verify Answer1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2304,
        2368
      ],
      "notes": "Verifies numeric answers with 20% threshold logic"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a math tutoring intent classifier and value extractor.\n\nProblem: {{ $json.current_problem.text }}\nStudent's Message: \"{{ $json.student_message }}\"\n\nContext:\n- Scaffolding Active: {{ $json.is_scaffolding_active }}\n- Teach-Back Active: {{ $json.is_teach_back_active }}\n\nYour job: Determine intent and extract numeric values.\n\n**CRITICAL EXTRACTION RULE**:\nExtract EXACTLY what the student SAID, NOT what you think they MEANT.\n- If student says \"one\", extract 1 (even if the correct answer is 2)\n- If student says \"eight\", extract 8 (even if the correct answer is 2)\n- DO NOT \"correct\" the student's answer - extract their stated value literally\n- Your job is extraction, NOT evaluation of correctness\n\n**TEACH-BACK SCENARIO**: If teach_back_active = true\nStudent is explaining their reasoning.\nReturn: {\"is_answer\": false, \"category\": \"teach_back_explanation\", \"extracted_value\": null}\n\n**ANSWER ATTEMPT**: Does the message contain a numeric answer?\n- Look for numbers: digits (\"1\", \"2\"), written (\"one\", \"two\"), expressions (\"1/2\", \"0.5\")\n- Include approximations: \"around 2\", \"about two\", \"maybe 1\"\n- \"I think it's one\" = answer attempt \u2713\n- \"I don't know what one means\" = NOT an answer \u2717\n\nIf YES (answer attempt):\n1. Extract the numeric value (convert written numbers to digits)\n2. Return: {\"is_answer\": true, \"category\": \"answer\", \"extracted_value\": <number>}\n\n**NON-ANSWER**: If not an answer attempt:\n- CONCEPTUAL_QUESTION: Asking about concepts (\"what is\", \"why\", \"how does\")\n- STUCK: Indicating confusion/need help (\"don't know\", \"help\", \"stuck\")\n- OFF_TOPIC: Unrelated to math\n\nReturn: {\"is_answer\": false, \"category\": \"conceptual_question|stuck|off_topic\", \"extracted_value\": null}\n\nOUTPUT FORMAT (JSON only):\n{\n  \"is_answer\": true/false,\n  \"category\": \"answer|conceptual_question|stuck|off_topic|teach_back_explanation\",\n  \"extracted_value\": <number or null>,\n  \"confidence\": 0.0-1.0,\n  \"reasoning\": \"brief explanation\"\n}\n\nEXAMPLES:\n\nStudent: \"one\" (Problem: \"What is -3 + 5?\")\n\u2192 {\"is_answer\": true, \"category\": \"answer\", \"extracted_value\": 1, \"confidence\": 0.95, \"reasoning\": \"Extracted 1 from student's literal answer 'one'\"}\n\nStudent: \"eight\" (Problem: \"What is -3 + 5?\")\n\u2192 {\"is_answer\": true, \"category\": \"answer\", \"extracted_value\": 8, \"confidence\": 0.95, \"reasoning\": \"Extracted 8 from student's literal answer 'eight'\"}\n\nStudent: \"I think it's around two\"\n\u2192 {\"is_answer\": true, \"category\": \"answer\", \"extracted_value\": 2, \"confidence\": 0.9, \"reasoning\": \"Approximate answer, extracted value 2\"}\n\nStudent: \"What does negative mean?\"\n\u2192 {\"is_answer\": false, \"category\": \"conceptual_question\", \"extracted_value\": null, \"confidence\": 0.95, \"reasoning\": \"Asking about concept\"}\n\nStudent: \"I don't know\"\n\u2192 {\"is_answer\": false, \"category\": \"stuck\", \"extracted_value\": null, \"confidence\": 0.9, \"reasoning\": \"Indicating need for help\"}\n\nYour response (JSON only):"
            }
          ]
        },
        "options": {
          "maxTokens": 150,
          "temperature": 0.2
        }
      },
      "id": "4a4ef3f2-0f38-425a-bff0-bb748033342b",
      "name": "LLM: Extract Intent & Value1",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        1952,
        2368
      ],
      "credentials": {
        "openAiApi": {
          "id": "IsfTAJGtC8cYJaRq",
          "name": "OpenAi account"
        }
      },
      "notes": "LLM extracts intent and numeric values from student input"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.session_id }}_problem_{{ $json.current_problem.id }}",
        "contextWindowLength": 15
      },
      "id": "94cf78ca-2478-4695-b434-4cd7df6cf346",
      "name": "Window Buffer Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.2,
      "position": [
        2992,
        2496
      ],
      "notes": "Tracks last 15 turns per problem (auto-resets when problem ID changes)"
    },
    {
      "parameters": {
        "description": "Verifies if a student's numeric answer to the main math problem is correct, close (within 20%), or wrong. Parameters: student_message (string), correct_answer (string). Returns: 'correct', 'close', or 'wrong_operation'",
        "jsCode": "// Verify Main Answer - Read from workflow context ($json)\ntry {\n  // Extract data from workflow context (passed by Prepare Agent Context node)\n  const studentMessage = $json.student_message || '';\n  const correctAnswer = $json.current_problem?.correct_answer || '';\n  \n  if (!studentMessage || !correctAnswer) {\n    return 'error: missing student_message or correct_answer in workflow context';\n  }\n  \n  const studentAnswer = String(studentMessage).toLowerCase().trim();\n  const correctAnswerStr = String(correctAnswer).toLowerCase().trim();\n  \n  // Extract just numbers (handle negative, decimals, fractions)\n  let studentNum = studentAnswer.replace(/[^0-9.\\-]/g, '');\n  let correctNum = correctAnswerStr.replace(/[^0-9.\\-]/g, '');\n  \n  if (!studentNum || !correctNum) {\n    return 'error: could not parse numbers';\n  }\n  \n  const studentVal = parseFloat(studentNum);\n  const correctVal = parseFloat(correctNum);\n  \n  if (isNaN(studentVal) || isNaN(correctVal)) {\n    return 'error: invalid numbers';\n  }\n  \n  // Calculate difference and thresholds\n  const diff = Math.abs(studentVal - correctVal);\n  const percentThreshold = Math.abs(correctVal * 0.2); // 20%\n  const closeThreshold = Math.max(percentThreshold, 0.3); // At least 0.3\n  \n  const isCorrect = diff < 0.001;\n  const isClose = !isCorrect && diff <= closeThreshold;\n  \n  // Return category as string (agent will parse this)\n  if (isCorrect) {\n    return 'correct';\n  } else if (isClose) {\n    return 'close';\n  } else {\n    return 'wrong_operation';\n  }\n  \n} catch (error) {\n  return 'error: ' + error.message + ' | stack: ' + error.stack;\n}"
      },
      "id": "78b42a5e-3ab3-4171-b7d8-b9f01c7e75ef",
      "name": "Tool: Verify Main Answer1",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.2,
      "position": [
        3136,
        2496
      ]
    },
    {
      "parameters": {
        "description": "Validates a student's response to a scaffolding sub-question using semantic understanding. Use this ONLY when you previously asked a scaffolding question and the student is now responding to it. Returns: {correct: bool, partially_correct: bool, reasoning: string}",
        "jsCode": "// Validate Scaffolding - Read from workflow context ($json)\ntry {\n  // Extract data from workflow context (passed by Prepare Agent Context node)\n  const studentResponse = $json.student_message || '';\n  const scaffoldingQuestion = $json.scaffolding_last_question || $json.last_tutor_question || '';\n  const problemContext = $json.current_problem?.text || '';\n  \n  if (!studentResponse) {\n    return JSON.stringify({\n      status: 'error',\n      reasoning: 'Missing student_message in workflow context'\n    });\n  }\n  \n  if (!scaffoldingQuestion) {\n    return JSON.stringify({\n      status: 'error',\n      reasoning: 'Missing scaffolding question in workflow context'\n    });\n  }\n  \n  // Return structured data for agent to evaluate\n  // Agent will use its LLM to determine if response is correct\n  return JSON.stringify({\n    scaffolding_question: scaffoldingQuestion,\n    student_response: studentResponse,\n    problem_context: problemContext,\n    validation_guidelines: {\n      accept_text_numbers: true,\n      semantic_meaning: 'Accept \"minus 2\" = \"-2\" = \"negative 2\"',\n      criteria: 'correct|partially_correct|incorrect'\n    }\n  });\n  \n} catch (error) {\n  return JSON.stringify({ \n    status: 'error',\n    error: error.message, \n    stack: error.stack \n  });\n}"
      },
      "id": "cbad696a-3c01-4fa9-97f8-6fa36ba51919",
      "name": "Tool: Validate Scaffolding1",
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.2,
      "position": [
        3264,
        2496
      ]
    },
    {
      "parameters": {
        "jsCode": "// Build context for AI Agent\nconst inputData = $input.item.json;\nconst sessionData = $('Load Session1').item.json;\nconst session = sessionData.session;\n\nconst recentTurns = session.recent_turns || [];\nconst lastTutorMessage = recentTurns.length > 0 ? recentTurns[recentTurns.length - 1]?.tutor_response || '' : '';\nconst lastCategory = recentTurns.length > 0 ? recentTurns[recentTurns.length - 1]?.category : null;\n\n// Check if last turn is from current problem (not previous problem)\nconst lastTurnFromCurrentProblem = recentTurns.length > 0 && \n  !recentTurns[recentTurns.length - 1]?.is_previous_problem;\n\n// Get state from session (preferred) or detect heuristically (fallback)\nconst scaffoldingState = session.current_problem?.scaffolding || { active: false, depth: 0, last_question: null };\nlet teachBackState = session.current_problem?.teach_back || { active: false, awaiting_explanation: false };\n\n// DEFENSIVE: Never allow teach-back on first turn (no previous conversation)\n// Force both the local variable AND the session object to prevent corruption\nif (recentTurns.length === 0) {\n  teachBackState = { active: false, awaiting_explanation: false };\n  if (session.current_problem?.teach_back) {\n    session.current_problem.teach_back.active = false;\n    session.current_problem.teach_back.awaiting_explanation = false;\n  }\n}\n\n// Fallback: Detect if we're in scaffolding mode (if state not set)\nif (!scaffoldingState.active && recentTurns.length > 0) {\n  const hasQuestionMark = lastTutorMessage.includes('?');\n  const isScaffoldingQuestion = lastTurnFromCurrentProblem && hasQuestionMark && (\n    lastTutorMessage.toLowerCase().includes('what does') ||\n    (lastTutorMessage.toLowerCase().includes('what is') && \n      !lastTutorMessage.toLowerCase().includes(session.current_problem.text.toLowerCase())) ||\n    lastTutorMessage.toLowerCase().includes('mean') ||\n    lastTutorMessage.toLowerCase().includes('think about') ||\n    lastTutorMessage.toLowerCase().includes('how') ||\n    lastTutorMessage.toLowerCase().includes('can you tell me') ||\n    lastTutorMessage.toLowerCase().includes('where is') ||\n    lastTutorMessage.toLowerCase().includes('where does') ||\n    lastTutorMessage.toLowerCase().includes('show me') ||\n    lastTutorMessage.toLowerCase().includes('visualize') ||\n    lastTutorMessage.toLowerCase().includes('represent') ||\n    lastTutorMessage.toLowerCase().includes('which direction') ||\n    lastTutorMessage.toLowerCase().includes(\"let's start\")\n  );\n  \n  if (isScaffoldingQuestion) {\n    scaffoldingState.active = true;\n    scaffoldingState.last_question = lastTutorMessage;\n  }\n}\n\n// REMOVED fallback heuristic detection for teach-back mode\n// Teach-back state is now ONLY managed by Update Session node after Response: Correct\n// This prevents false positives where \"explain\" appears in scaffolding/clarification questions\n\n\n// ===== SCAFFOLDING CONCEPTUAL ANSWER DETECTION =====\n// Detect operation/concept keywords BEFORE AI Agent call\n// If detected, set flag to force scaffold_progress classification\n\nlet detectedScaffoldingAnswer = false;\n\nif (scaffoldingState.active) {\n  const msg = inputData.message.toLowerCase().trim();\n\n  // Operation keywords (answering \"are we adding or subtracting?\")\n  const hasOperation = msg.includes('add') || msg.includes('subtract') ||\n    msg.includes('multiply') || msg.includes('divide') ||\n    msg.includes('plus') || msg.includes('minus') || msg.includes('times');\n\n  // Direction keywords (answering \"left or right?\")\n  const hasDirection = msg.includes('left') || msg.includes('right') ||\n    msg.includes('up') || msg.includes('down');\n\n  // Position keywords (answering \"where are we?\")\n  const hasPosition = msg.includes('positive') || msg.includes('negative') ||\n    msg.includes('zero');\n\n  // Concept keywords (answering \"what does it mean?\")\n  const hasConcept = msg.includes('bigger') || msg.includes('smaller') ||\n    msg.includes('more') || msg.includes('less') ||\n    msg.includes('greater') || msg.includes('fewer');\n\n  if (hasOperation || hasDirection || hasPosition || hasConcept) {\n    detectedScaffoldingAnswer = true;\n  }\n}\n\nreturn [{\n  json: {\n    student_message: inputData.message,\n    current_problem: session.current_problem,\n    attempt_count: session.current_problem?.attempt_count || 1,\n    is_scaffolding_active: scaffoldingState.active,\n    scaffolding_depth: scaffoldingState.depth,\n    scaffolding_last_question: scaffoldingState.last_question || lastTutorMessage,\n    is_teach_back_active: teachBackState.active,\n    teach_back_awaiting: teachBackState.awaiting_explanation,\n    last_tutor_question: scaffoldingState.active ? (scaffoldingState.last_question || lastTutorMessage) : null,\n    last_category: lastCategory,\n    session_id: sessionData._session_id,\n    student_id: sessionData.student_id,\n    _session: session,\n    _start_time: sessionData._start_time,\n    detected_scaffolding_answer: detectedScaffoldingAnswer\n  }\n}];"
      },
      "id": "ce20fdc2-7110-4db8-acdc-4f3e447f1fe3",
      "name": "Prepare Agent Context1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1808,
        2368
      ],
      "notes": "Detects scaffolding mode and builds context for agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=The student said: \"{{ $json.student_message }}\"\n\nYou MUST call one of the available tools to validate this response. After calling the tool, return ONLY the required JSON structure with no additional text.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You classify student responses during scaffolding.\n\n\nIMPORTANT: Two types of scaffolding answers to check:\n\n1. KEYWORD ANSWERS (detected_scaffolding_answer flag):\n   If detected_scaffolding_answer is true:\n   - Student said operation/concept keywords (\"adding\", \"right\", etc.)\n   - Classify as \"scaffold_progress\"\n   - Set is_main_problem_attempt: false\n\n2. NUMERIC ANSWERS (check manually):\n   If student gave a NUMBER during scaffolding:\n   - Extract the number from: \"{{ $json.student_message }}\"\n   - Compare to main answer: {{ $json.current_problem.correct_answer }}\n   - If MATCH \u2192 \"scaffold_progress\" (they solved it!)\n   - If NO MATCH \u2192 \"stuck\" (they're working on sub-steps, likely wrong)\n   - DEFAULT: When uncertain \u2192 \"stuck\"\n\n\nContext:\n- detected_scaffolding_answer: {{ $json.detected_scaffolding_answer }}\n- Student said: \"{{ $json.student_message }}\"\n- Scaffolding question: \"{{ $json.scaffolding_last_question }}\"\n- Main problem: {{ $json.current_problem.text }}\n- Correct answer: {{ $json.current_problem.correct_answer }}\n\nDECISION PROCESS (follow this order):\n\nSTEP 1: ALWAYS call validate_scaffolding tool first\nThis tool provides the scaffolding question and student response for semantic analysis.\n\nSTEP 2: Determine if student is answering SCAFFOLDING QUESTION or MAIN PROBLEM\n\nAsk yourself: \"Does the student's response semantically address the scaffolding question?\"\n\n**SCAFFOLDING RESPONSE indicators:**\n- Response directly answers what the scaffolding question asked\n- Response contains descriptive/contextual language related to the scaffolding topic\n- Even if response contains numbers, check if it's describing something asked in scaffolding\n\n**MAIN PROBLEM ATTEMPT indicators:**\n- Standalone numeric answer with no scaffolding context\n- Phrases like \"the answer is [number]\", \"I think it's [number]\"\n- Student explicitly stating they're answering the main problem\n\nEXAMPLES:\n\nScaffolding Q: \"can you find the position of 5 on the number line?\"\n- \"it's 5 positions to the right of 0\" \u2192 SCAFFOLDING RESPONSE (describes position)\n- \"5 spaces to the right\" \u2192 SCAFFOLDING RESPONSE (answers the position question)\n- \"5\" alone \u2192 Could be either, check context (if previous turns were about position, likely scaffolding)\n- \"the answer is 5\" \u2192 MAIN PROBLEM ATTEMPT (explicit answer phrase)\n\nScaffolding Q: \"what is 1/2 + 1/4?\"\n- \"3/4\" \u2192 SCAFFOLDING RESPONSE (answers the scaffolding sub-problem)\n- \"it's three fourths\" \u2192 SCAFFOLDING RESPONSE\n- \"the answer to the main problem is 2\" \u2192 MAIN PROBLEM ATTEMPT\n\nScaffolding Q: \"what does -3 mean?\"\n- \"three spaces to the left of zero\" \u2192 SCAFFOLDING RESPONSE (explains concept)\n- \"negative 3\" \u2192 SCAFFOLDING RESPONSE (answers concept question)\n- \"2\" \u2192 MAIN PROBLEM ATTEMPT (unrelated to concept question)\n\nSTEP 3: Route to appropriate tool and classify\n\n**NUMERIC SCAFFOLDING ANSWER CHECK** (DO THIS FIRST):\n\nIf scaffolding is active AND student gave a numeric answer:\n\n1. Extract student's ANSWER (look for answer phrases, not process):\n\n   ANSWER PHRASES to look for:\n   - \"we get X\", \"land on X\", \"it's X\", \"equals X\", \"is X\"\n   - \"I think X\", \"X?\" (when X is standalone)\n\n   IGNORE process descriptions:\n   - \"5 steps\" (that's process, not answer)\n   - \"move 5\" (that's process, not answer)\n\n   EXAMPLES:\n   - \"that's 5 steps and we get 2\" \u2192 extract 2 (answer phrase \"get 2\")\n   - \"move 5 steps to reach 2\" \u2192 extract 2 (answer phrase \"reach 2\")\n   - \"I think we get 5\" \u2192 extract 5 (answer phrase \"get 5\")\n   - \"5?\" \u2192 extract 5 (standalone number)\n   - \"I think 1\" \u2192 extract 1 (answer phrase \"think 1\")\n\n2. Compare extracted answer to main problem answer: {{ $json.current_problem.correct_answer }}\n\n3. Decision based on comparison:\n\n   IF EXTRACTED ANSWER MATCHES MAIN ANSWER:\n   - Student just solved the main problem!\n   - Classify: \"scaffold_progress\"\n   - Example: Main answer is 2, student says \"we get 2\" \u2192 MATCH \u2192 celebrate!\n\n   IF EXTRACTED ANSWER DOESN'T MATCH:\n   - Student is working on sub-steps OR gave wrong answer\n   - Classify: \"stuck\"\n   - Example: Main answer is 2, student says \"I think 5\" \u2192 NO MATCH \u2192 help them\n\n   CRITICAL: Focus on extracting the ANSWER, not process numbers\n   \"5 steps and we get 2\" \u2192 answer is 2, NOT 5\n\nCRITICAL: When in doubt about correctness \u2192 classify as \"stuck\" (safe default)\nNEVER say \"Yes! That's right!\" unless you are CERTAIN the answer is correct\n\n\nEXAMPLES OF CORRECT VS INCORRECT SCAFFOLDING ANSWERS:\n\nScaffolding Q: \"If we start at -3 and move 5 steps right, where do we land?\"\nCorrect answer: 2 (calculation: -3+5 = 2)\n- Student: \"2\" \u2192 CORRECT \u2192 scaffold_progress \u2192 \"Yes! We land at 2...\"\n- Student: \"5\" \u2192 WRONG \u2192 stuck \u2192 \"Not quite. Let's count together: -2, -1, 0, 1, 2...\"\n- Student: \"8\" \u2192 WRONG \u2192 stuck \u2192 \"That's not quite right. Remember we START at -3...\"\n\nScaffolding Q: \"What is -3 + 1?\"\nCorrect answer: -2\n- Student: \"-2\" or \"negative 2\" \u2192 CORRECT \u2192 scaffold_progress\n- Student: \"-4\" \u2192 WRONG \u2192 stuck\n- Student: \"4\" \u2192 WRONG \u2192 stuck\n\nCRITICAL RULE: If the numbers don't match, classification MUST be \"stuck\", NOT \"scaffold_progress\".\n\nIf SCAFFOLDING RESPONSE:\n1. Use the validate_scaffolding tool output to evaluate correctness\n2. Assess if response correctly answers the scaffolding question\n3. Be FLEXIBLE with answer formats:\n   * Numeric: \"5\", \"five\", \"5 spaces\", \"five spaces\" all mean the same\n   * Directional: \"right\", \"to the right\", \"move right\" all mean the same\n   * Position: \"-3\", \"negative 3\", \"minus 3\", \"3 left of zero\" all mean the same\n4. Classification decision:\n   - If answer is NUMERIC and MATCHES main problem answer \u2192 \"scaffold_progress\" (solved it!)\n   - If answer is NUMERIC but doesn't match \u2192 \"stuck\" (needs help with sub-steps)\n   - If \"I don't know\" or confused \u2192 \"stuck\"\n   - If conceptual answer (like \"adding\", \"right\") \u2192 Check if correct, then \"scaffold_progress\"\n\n   DEFAULT SAFE RULE: When uncertain \u2192 classify as \"stuck\"\n   NEVER classify as \"scaffold_progress\" unless answer is clearly correct\n5. Set is_main_problem_attempt: false\n\nIf MAIN PROBLEM ATTEMPT:\n1. Call the verify_main_answer tool\n2. Use the tool's returned category (\"correct\", \"close\", or \"wrong_operation\")\n3. Set is_main_problem_attempt: true\n\nRETURN FORMAT:\nAfter calling the appropriate tool and evaluating, return this JSON structure:\n{\n  \"category\": \"correct\" | \"close\" | \"wrong_operation\" | \"scaffold_progress\" | \"stuck\",\n  \"is_main_problem_attempt\": boolean,\n  \"confidence\": number between 0 and 1,\n  \"reasoning\": \"brief explanation string\"\n}"
        }
      },
      "id": "86b0eebd-c844-4937-8e24-b9ab10c44d48",
      "name": "AI Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        2960,
        2176
      ],
      "notes": "Agent with tools for context-aware classification"
    },
    {
      "parameters": {
        "jsCode": "// Parse agent response with error handling\nconst agentData = $input.item.json;\n\nlet classification;\ntry {\n  // n8n AI Agent with Structured Output Parser returns data in different formats\n  // Try multiple extraction strategies\n  \n  // Strategy 0: Check for __structured__output wrapper (n8n + OpenAI pattern)\n  if (agentData.text && typeof agentData.text === 'string') {\n    try {\n      const parsed = JSON.parse(agentData.text);\n      if (parsed.__structured__output && parsed.__structured__output.category) {\n        classification = parsed.__structured__output;\n      }\n    } catch (e) {\n      // Not JSON or doesn't have __structured__output, try other strategies\n    }\n  }\n  \n  // Strategy 1: Direct object with expected fields (most common)\n  if (!classification && agentData.category && typeof agentData.category === 'string') {\n    classification = {\n      category: agentData.category,\n      is_main_problem_attempt: agentData.is_main_problem_attempt,\n      confidence: agentData.confidence,\n      reasoning: agentData.reasoning\n    };\n  }\n  // Strategy 2: Nested in 'output' field\n  else if (agentData.output) {\n    if (typeof agentData.output === 'string') {\n      classification = JSON.parse(agentData.output);\n    } else if (typeof agentData.output === 'object') {\n      classification = agentData.output;\n    }\n  }\n  // Strategy 3: Nested in 'text' field\n  else if (agentData.text) {\n    if (typeof agentData.text === 'string') {\n      classification = JSON.parse(agentData.text);\n    } else if (typeof agentData.text === 'object') {\n      classification = agentData.text;\n    }\n  }\n  // Strategy 4: Array format\n  else if (Array.isArray(agentData)) {\n    const firstItem = agentData[0];\n    if (firstItem) {\n      if (firstItem.category) {\n        classification = firstItem;\n      } else if (firstItem.output) {\n        classification = typeof firstItem.output === 'string' ? JSON.parse(firstItem.output) : firstItem.output;\n      } else if (firstItem.text) {\n        classification = typeof firstItem.text === 'string' ? JSON.parse(firstItem.text) : firstItem.text;\n      }\n    }\n  }\n  // Strategy 5: message.content format (OpenAI)\n  else if (agentData.message?.content) {\n    if (typeof agentData.message.content === 'string') {\n      classification = JSON.parse(agentData.message.content);\n    } else {\n      classification = agentData.message.content;\n    }\n  }\n\n  if (!classification || !classification.category) {\n    throw new Error('Unable to extract classification with valid category field. Agent data: ' + JSON.stringify(agentData).slice(0, 200));\n  }\n\n} catch (error) {\n  classification = {\n    category: 'stuck',\n    confidence: 0.5,\n    is_main_problem_attempt: false,\n    reasoning: `Parsing error: ${error.message}`,\n    tool_used: 'none',\n    error: true,\n    _raw_data: JSON.stringify(agentData).slice(0, 500)\n  };\n}\n\n// Map teach_back_explanation to stuck for routing (scaffold_progress gets its own response)\nlet responseCategory = classification.category;\nif (classification.category === 'teach_back_explanation') {\n  responseCategory = 'stuck';\n}\n\nreturn [{\n  json: {\n    category: responseCategory,\n    confidence: classification.confidence || 0.5,\n    is_main_problem_attempt: classification.is_main_problem_attempt || false,\n    verification: classification.verification_result || null,\n    agent_reasoning: classification.reasoning || '',\n    tool_used: classification.tool_used || 'none',\n    original_category: classification.category,\n    _parse_error: classification.error || false,\n    _raw_sample: classification._raw_data || null\n  }\n}];"
      },
      "id": "fcd4776f-8d43-42b8-a917-65c9dc011d02",
      "name": "Parse Agent Output1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3360,
        2176
      ],
      "notes": "Parses agent JSON, handles errors, maps categories"
    },
    {
      "parameters": {
        "jsCode": "// Build Response Context - Format conversation history for response nodes\nconst classification = $input.item.json;\nconst context = $('Prepare Agent Context1').item.json;\nconst session = context._session;\n\n// Format recent turns as chat history string\nlet chatHistory = '';\nif (session.recent_turns && session.recent_turns.length > 0) {\n  chatHistory = session.recent_turns.map((turn, i) => {\n    return `Student: ${turn.student_message}\\nTutor: ${turn.tutor_response}`;\n  }).join('\\n\\n');\n}\n\nreturn [{\n  json: {\n    // Classification data\n    category: classification.category,\n    confidence: classification.confidence,\n    is_main_problem_attempt: classification.is_main_problem_attempt,\n    verification: classification.verification,\n    \n    // Context for response generation\n    current_problem: context.current_problem,\n    message: context.student_message,\n    attempt_count: context.attempt_count,\n    chat_history: chatHistory,\n    is_scaffolding_active: context.is_scaffolding_active,\n    scaffolding_depth: context.scaffolding_depth,\n    is_teach_back_active: context.is_teach_back_active,\n    teach_back_awaiting: context.teach_back_awaiting,\n    \n    // Pass through for later nodes\n    _session: session,\n    _session_id: context.session_id,\n    _start_time: context._start_time,\n    _classification: classification\n  }\n}];"
      },
      "id": "951a8dc8-0891-4353-bf23-c1d0f49f32fb",
      "name": "Build Response Context1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3472,
        2672
      ],
      "notes": "Formats conversation history and merges context for response nodes"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "tutor/message",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "f80435bf-31c8-47a1-900e-e7b7b72ca6ec",
      "name": "Webhook Trigger1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        1072,
        2544
      ],
      "webhookId": "tutor-message",
      "notes": "Receives: {student_id, session_id, message, current_problem: {id, text, correct_answer}}"
    },
    {
      "parameters": {
        "jsCode": "// Normalize Input - Transform chat and webhook payloads to consistent format\n  const inputData = $input.item.json;\n\n  // Detect source type\n  let source = 'unknown';\n  let normalizedData = {};\n\n  // Check if this is from Chat Trigger\n  if (inputData.chatId || inputData.chat || inputData.sessionId) {\n    source = 'chat';\n\n    // Map chat fields to expected format\n    normalizedData = {\n      session_id: inputData.chatId || inputData.sessionId || inputData.chat?.id || `chat_${Date.now()}`,\n      student_id: inputData.userId || inputData.user?.id || inputData.from || 'unknown_user',\n      message: inputData.chatInput || inputData.message || inputData.text || inputData.chatMessage || '',\n\n      // Default problem if none provided\n      current_problem: inputData.current_problem || {\n        id: 'default_problem_1',\n        text: 'What is -3 + 5?',\n        correct_answer: '2'\n      },\n\n      // Metadata\n      _source: 'chat',\n      _original_payload: inputData\n    };\n  }\n  // Check if this is from Webhook Trigger\n  else if (inputData.session_id || inputData.student_id || inputData.current_problem) {\n    source = 'webhook';\n\n    // Webhook already in correct format, just pass through\n    normalizedData = {\n      session_id: inputData.session_id,\n      student_id: inputData.student_id,\n      message: inputData.message,\n      current_problem: inputData.current_problem,\n\n      // Metadata\n      _source: 'webhook',\n      _original_payload: inputData\n    };\n  }\n  // Unknown source - try best guess\n  else {\n    source = 'unknown';\n\n    normalizedData = {\n      session_id: inputData.id || `session_${Date.now()}`,\n      student_id: inputData.user || 'unknown',\n      message: inputData.chatInput || inputData.message || inputData.text || '',\n      current_problem: {\n        id: 'default_problem_1',\n        text: 'What is -3 + 5?',\n        correct_answer: '2'\n      },\n\n      // Metadata\n      _source: 'unknown',\n      _original_payload: inputData,\n      _warning: 'Could not detect source type, using defaults'\n    };\n  }\n\n  return {\n    json: normalizedData\n  };"
      },
      "id": "82f118bb-5f07-42b6-baa6-df2c0549f5d7",
      "name": "Normalize input1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1344,
        2368
      ],
      "notes": "Loads session from workflow static data, adds start_time for latency tracking"
    },
    {
      "parameters": {
        "jsCode": "// Load or initialize session from REDIS\n// FIX: Read from Normalize Input, not from Redis node output\nconst normalizedInput = $('Normalize input1').first().json;\nconst sessionId = normalizedInput.session_id;\nconst studentId = normalizedInput.student_id;\nconst currentProblem = normalizedInput.current_problem || {\n  id: 'default_problem_1',\n  text: 'What is -3 + 5?',\n  correct_answer: '2'\n};\n\n// Get session from Redis Get node\nlet session = null;\nlet sessionFound = false;\n\ntry {\n  const redisData = $('Redis: Get Session1').first().json;\n  // Redis returns {key: '...', value: '...'} or {key: '...', propertyName: '...'}\n  if (redisData && (redisData.value || redisData.propertyName)) {\n    try {\n      session = JSON.parse(redisData.value || redisData.propertyName);\n      sessionFound = true;\n    } catch (error) {\n      session = null;\n    }\n  }\n} catch (error) {\n  // Redis node failed, will create new session\n}\n\nif (!session) {\n  // Create new session\n  session = {\n    session_id: sessionId,\n    student_id: studentId,\n    created_at: new Date().toISOString(),\n    last_active: new Date().toISOString(),\n    current_problem: {\n      id: currentProblem.id,\n      text: currentProblem.text,\n      correct_answer: currentProblem.correct_answer,\n      attempt_count: 0,\n      scaffolding: {\n        active: false,\n        depth: 0,\n        last_question: null\n      },\n      teach_back: {\n        active: false,\n        awaiting_explanation: false\n      }\n    },\n    recent_turns: [],\n    stats: {\n      total_turns: 0,\n      problems_attempted: 1,\n      problems_solved: 0\n    }\n  };\n}\n\n// Check if problem changed (Hybrid Memory: keep only last 3 turns for continuity)\nif (session.current_problem && session.current_problem.id !== currentProblem.id) {\n  // Keep last 3 turns from previous problem for continuity\n  if (session.recent_turns && session.recent_turns.length > 0) {\n    session.recent_turns = session.recent_turns.slice(-3);\n    session.recent_turns.forEach(turn => {\n      turn.is_previous_problem = true;\n    });\n  }\n\n  // Reset problem data\n  session.current_problem = {\n    id: currentProblem.id,\n    text: currentProblem.text,\n    correct_answer: currentProblem.correct_answer,\n    attempt_count: 0,\n    scaffolding: {\n      active: false,\n      depth: 0,\n      last_question: null\n    },\n    teach_back: {\n      active: false,\n      awaiting_explanation: false\n    }\n  };\n  session.stats.problems_attempted++;\n}\n\n// Ensure required fields exist (defensive programming)\nif (!session.recent_turns) {\n  session.recent_turns = [];\n}\nif (!session.current_problem) {\n  session.current_problem = {\n    id: currentProblem.id,\n    text: currentProblem.text,\n    correct_answer: currentProblem.correct_answer,\n    attempt_count: 0,\n    scaffolding: { active: false, depth: 0, last_question: null },\n    teach_back: { active: false, awaiting_explanation: false }\n  };\n} else {\n  // FIX: Even if session.current_problem exists, ensure text and correct_answer are present\n  // This fixes the bug where Redis has incomplete current_problem from previous saves\n  if (!session.current_problem.text || !session.current_problem.correct_answer || !session.current_problem.id) {\n    session.current_problem.id = session.current_problem.id || currentProblem.id;\n    session.current_problem.text = session.current_problem.text || currentProblem.text;\n    session.current_problem.correct_answer = session.current_problem.correct_answer || currentProblem.correct_answer;\n  }\n  // Ensure nested objects exist\n  if (!session.current_problem.scaffolding) {\n    session.current_problem.scaffolding = { active: false, depth: 0, last_question: null };\n  }\n  if (!session.current_problem.teach_back) {\n    session.current_problem.teach_back = { active: false, awaiting_explanation: false };\n  }\n}\n\n// DEFENSIVE: Force reset teach-back on first turn (prevent Redis corruption)\nif (session.recent_turns.length === 0) {\n  session.current_problem.teach_back = { active: false, awaiting_explanation: false };\n}\n\n// Add start time for latency tracking\nconst startTime = Date.now();\n\nreturn {\n  json: {\n    // FIX: Spread normalizedInput (has message field), not Redis output\n    ...normalizedInput,\n    // Then our explicit fields OVERRIDE\n    session: session,\n    _session_id: sessionId,\n    _start_time: startTime,\n    current_problem: currentProblem\n  }\n};"
      },
      "id": "4810cb67-c6f5-45be-8374-8146e6fa9f5f",
      "name": "Load Session1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1664,
        2368
      ],
      "notes": "Loads session from workflow static data, adds start_time for latency tracking"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "correct",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "f2730a2d-c83f-4578-b43c-cba4ac33ba5d"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "correct"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "close",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "7aa208f0-a386-40e6-97e3-e1d9383c9dd7"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "close"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "wrong_operation",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "03091a63-a69f-491e-b02c-f8414f24cb31"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "wrong_operation"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "conceptual_question",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "819f2d28-0eff-4133-9353-0ebb60ad8285"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "conceptual_question"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "stuck",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "a2f03eec-df1f-4283-8b1d-0ec5b9140b1a"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "stuck"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "off_topic",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "9c82a4d3-7a63-462f-9c50-7b36347e26c6"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "off_topic"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "scaffold_progress",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "5d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "scaffold_progress"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "10d31d75-cbf4-4ab2-9ce9-4dadb9e5813f",
      "name": "Route by Category1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        3648,
        2336
      ],
      "notes": "6-way router: sends to appropriate response generator"
    },
    {
      "parameters": {
        "jsCode": "// Update session with conversation tracking (REDIS)\nconst contextData = $('Build Response Context1').item.json;\nconst responseData = $input.item.json;\nconst response = responseData.message?.content || responseData.text || \"I'm here to help you learn!\";\n\nconst session = contextData._session;\nconst classification = contextData._classification;\nconst category = classification.original_category || classification.category;\n\n// Only increment attempt_count for main problem attempts\nif (classification.is_main_problem_attempt) {\n  session.current_problem.attempt_count++;\n}\n\n// STATE TRANSITIONS\n\n// 1. SCAFFOLDING STATE MANAGEMENT\nif (category === 'stuck' && !contextData.is_scaffolding_active && !contextData.is_teach_back_active) {\n  session.current_problem.scaffolding = {\n    active: true,\n    depth: 1,\n    last_question: response\n  };\n} else if (category === 'scaffold_progress') {\n  if (session.current_problem.scaffolding) {\n    session.current_problem.scaffolding.depth++;\n    session.current_problem.scaffolding.last_question = response;\n  }\n} else if (category === 'stuck' && contextData.is_scaffolding_active && !contextData.is_teach_back_active) {\n  // Keep scaffolding active when student is stuck during scaffolding\n  if (session.current_problem.scaffolding) {\n    session.current_problem.scaffolding.last_question = response;\n    // Keep active and depth unchanged\n  }\n} else if (category === 'correct' && contextData.is_scaffolding_active) {\n  session.current_problem.scaffolding = {\n    active: false,\n    depth: 0,\n    last_question: null\n  };\n}\n\n// 2. TEACH-BACK STATE MANAGEMENT\nif (category === 'correct' && !contextData.is_teach_back_active) {\n  session.current_problem.teach_back = {\n    active: true,\n    awaiting_explanation: true\n  };\n} else if (category === 'teach_back_explanation') {\n  session.current_problem.teach_back = {\n    active: false,\n    awaiting_explanation: false\n  };\n}\n\n// Mark solved if correct\nif (classification.category === 'correct') {\n  session.stats.problems_solved++;\n}\n\n// Track conversation in recent_turns\nif (!session.recent_turns) {\n  session.recent_turns = [];\n}\n\nsession.recent_turns.push({\n  student_message: contextData.message,\n  tutor_response: response,\n  category: classification.category,\n  timestamp: new Date().toISOString()\n});\n\n// Keep only last 15 turns\nif (session.recent_turns.length > 15) {\n  session.recent_turns = session.recent_turns.slice(-15);\n}\n\nsession.last_active = new Date().toISOString();\nsession.stats.total_turns++;\n\n\n// Debug info for n8n UI\nconst debugInfo = {\n  state_before: {\n    scaffolding_active: contextData.is_scaffolding_active,\n    teach_back_active: contextData.is_teach_back_active\n  },\n  state_after: {\n    scaffolding_active: session.current_problem.scaffolding.active,\n    teach_back_active: session.current_problem.teach_back.active\n  },\n  classification: {\n    category: classification.category,\n    original_category: classification.original_category,\n    is_main_problem_attempt: classification.is_main_problem_attempt\n  }\n};\n\nreturn [{\n  json: {\n    output: response,\n    _session_id: contextData._session_id,\n    _session_for_redis: session,\n    _debug: debugInfo\n  }\n}];"
      },
      "id": "3f6645e2-01e6-47c9-91df-bd4808dc1aef",
      "name": "Update Session & Format Response1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4256,
        2336
      ],
      "notes": "Calculates latency, updates session, saves to static data, formats API response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "a307f073-ae51-490f-8ff8-33f597991be2",
      "name": "Webhook Response1",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        4592,
        2336
      ],
      "notes": "Returns: {response: string, metadata: {...}}"
    },
    {
      "parameters": {
        "operation": "get",
        "key": "=tutor_session:{{ $json.session_id }}",
        "options": {}
      },
      "id": "6a332fc4-e060-4c0b-8338-344cb155f390",
      "name": "Redis: Get Session1",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1504,
        2368
      ],
      "credentials": {
        "redis": {
          "id": "lbH3dgkjrvaKhWrb",
          "name": "Redis account"
        }
      },
      "notes": "Loads session from Redis (returns null if not exists)"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=tutor_session:{{ $json._session_id }}",
        "value": "={{ JSON.stringify($json._session_for_redis) }}"
      },
      "id": "2901b4f2-33da-4396-ada2-de4d987df967",
      "name": "Redis: Save Session1",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4384,
        2336
      ],
      "credentials": {
        "redis": {
          "id": "lbH3dgkjrvaKhWrb",
          "name": "Redis account"
        }
      },
      "notes": "Saves session to Redis with 30-min TTL"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "messages": {
          "values": [
            {
              "content": "={{\n  $json.category == 'correct' ?\n    'You are a patient, encouraging math tutor for grades 3-5 (ages 8-10).\\n\\nCRITICAL GROUNDING RULES (apply to ALL responses):\\n\u2713 Use ONLY numbers from this problem: ' + $json.current_problem.text + '\\n\u2713 NEVER make up different numbers, examples, or scenarios\\n\u2713 If problem is \"-3 + 5\", use ONLY -3, +, and 5\\n\u2713 Verify before responding: Are all numbers from the actual problem? \u2713\\n\\nCONTEXT:\\nProblem: ' + $json.current_problem.text + '\\nCorrect Answer: ' + $json.current_problem.correct_answer + '\\nStudent\\'s Answer: \"' + $json.message + '\" \u2713 CORRECT\\n' +\n    'Attempt #: ' + $json.attempt_count + '\\n' +\n    ($json.is_scaffolding_active ? 'Context: Solved through scaffolding\\n' : '') +\n    '\\nRecent Conversation:\\n' + ($json.chat_history || 'First interaction') + '\\n\\n---\\n\\nSTRATEGY - TEACH-BACK:\\n' +\n    '1. Acknowledge briefly: \"Yes!\" or \"Correct!\" (choose ONE, not both)\\n' +\n    '2. Ask them to explain their reasoning\\n' +\n    '\\nEXAMPLE: \"Yes! How did you get ' + $json.message + '?\"\\n' +\n    '\\n2-3 sentences maximum\\n\\n'\n  : $json.category == 'close' ?\n    'You are a patient, encouraging math tutor for grades 3-5 (ages 8-10).\\n\\nCRITICAL GROUNDING RULES (apply to ALL responses):\\n\u2713 Use ONLY numbers from this problem: ' + $json.current_problem.text + '\\n\u2713 NEVER make up different numbers, examples, or scenarios\\n\u2713 If problem is \"-3 + 5\", use ONLY -3, +, and 5\\n\u2713 Verify before responding: Are all numbers from the actual problem? \u2713\\n\\nCONTEXT:\\nProblem: ' + $json.current_problem.text + '\\nCorrect Answer: ' + $json.current_problem.correct_answer + '\\nStudent\\'s Answer: \"' + $json.message + '\" (close but not quite)\\n' +\n    'Attempt #: ' + $json.attempt_count + '\\n' +\n    '\\nRecent Conversation:\\n' + ($json.chat_history || 'First interaction') + '\\n\\n---\\n\\nSTRATEGY - GENTLE PROBE:\\n' +\n    ($json.attempt_count == 1 ?\n      '- Probe gently: \"You\\'re close! Want to double-check?\"\\n' :\n      $json.attempt_count == 2 ?\n        '- More explicit hint about where the error is\\n' :\n        '- Walk through one step, then let them finish\\n'\n    ) +\n    '\\n2-3 sentences maximum\\n\\n'\n  : $json.category == 'wrong_operation' ?\n    'You are a patient, encouraging math tutor for grades 3-5 (ages 8-10).\\n\\nCRITICAL GROUNDING RULES (apply to ALL responses):\\n\u2713 Use ONLY numbers from this problem: ' + $json.current_problem.text + '\\n\u2713 NEVER make up different numbers, examples, or scenarios\\n\u2713 If problem is \"-3 + 5\", use ONLY -3, +, and 5\\n\u2713 Verify before responding: Are all numbers from the actual problem? \u2713\\n\\nCONTEXT:\\nProblem: ' + $json.current_problem.text + '\\nCorrect Answer: ' + $json.current_problem.correct_answer + '\\nStudent\\'s Answer: \"' + $json.message + '\" (suggests misconception)\\n' +\n    'Attempt #: ' + $json.attempt_count + '\\n' +\n    '\\nRecent Conversation:\\n' + ($json.chat_history || 'First interaction') + '\\n\\n---\\n\\nSTRATEGY - CLARIFY MISCONCEPTION:\\n' +\n    ($json.attempt_count == 1 ?\n      '- Ask clarifying question: \"When we see +, are we adding or subtracting?\"\\n' :\n      $json.attempt_count == 2 ?\n        '- Give direct hint about the operation\\n' :\n        '- Teach the concept using this problem\\'s exact numbers\\n'\n    ) +\n    '\\n2-3 sentences maximum\\n\\n'\n  : $json.category == 'conceptual_question' ?\n    'You are a patient, encouraging math tutor for grades 3-5 (ages 8-10).\\n\\nCRITICAL GROUNDING RULES (apply to ALL responses):\\n\u2713 Use ONLY numbers from this problem: ' + $json.current_problem.text + '\\n\u2713 NEVER make up different numbers, examples, or scenarios\\n\u2713 If problem is \"-3 + 5\", use ONLY -3, +, and 5\\n\u2713 Verify before responding: Are all numbers from the actual problem? \u2713\\n\\nCONTEXT:\\nProblem: ' + $json.current_problem.text + '\\nCorrect Answer: ' + $json.current_problem.correct_answer + '\\nStudent\\'s Question: \"' + $json.message + '\"\\n' +\n    '\\nRecent Conversation:\\n' + ($json.chat_history || 'First interaction') + '\\n\\n---\\n\\nSTRATEGY - TEACH CONCEPT:\\n' +\n    '1. Brief simple definition (1 sentence, grade 3-5 vocabulary)\\n' +\n    '2. Concrete example using this problem\\'s actual numbers\\n' +\n    '3. End with check question\\n' +\n    '\\nEXAMPLE: \"A negative number is less than zero. In ' + $json.current_problem.text + ', the -3 means 3 steps left of zero. Can you try it now?\"\\n' +\n    '\\n2-3 sentences total\\n\\n'\n  : $json.category == 'stuck' ?\n    'You are a patient, encouraging math tutor for grades 3-5 (ages 8-10).\\n\\nCRITICAL GROUNDING RULES (apply to ALL responses):\\n\u2713 Use ONLY numbers from this problem: ' + $json.current_problem.text + '\\n\u2713 NEVER make up different numbers, examples, or scenarios\\n\u2713 If problem is \"-3 + 5\", use ONLY -3, +, and 5\\n\u2713 Verify before responding: Are all numbers from the actual problem? \u2713\\n\\nCONTEXT:\\nProblem: ' + $json.current_problem.text + '\\nCorrect Answer: ' + $json.current_problem.correct_answer + '\\nStudent\\'s Response: \"' + $json.message + '\"\\n' +\n    'Attempt #: ' + $json.attempt_count + '\\n' +\n    'Scaffolding Active: ' + $json.is_scaffolding_active + '\\n' +\n    'Teach-Back Active: ' + $json.is_teach_back_active + '\\n' +\n    '\\nRecent Conversation:\\n' + ($json.chat_history || 'First interaction') + '\\n\\n---\\n\\nSTRATEGY - SCAFFOLD:\\n' +\n    ($json.is_teach_back_active ?\n      '## COMPLETE TEACH-BACK (student can\\'t explain):\\n' +\n      '- Respond warmly: \"That\\'s okay! The important thing is you got the right answer.\"\\n' +\n      '- 1-2 sentences, signal completion\\n\\n'\n    :\n      $json.is_scaffolding_active ?\n        '## CONTINUE SCAFFOLDING (student stuck on sub-question):\\n' +\n        'ACKNOWLEDGE based on response type:\\n' +\n        '- If \"I don\\'t know\" / asking for help \u2192 \"Let me help!\"\\n' +\n        '- If wrong numeric answer \u2192 \"Not quite. Let\\'s try...\"\\n' +\n        '- NEVER say \"No problem!\" for wrong answers\\n' +\n        '\\nTHEN:\\n' +\n        '- Rephrase question more simply OR break into smaller sub-question\\n' +\n        '- Read chat history to avoid repeating same question\\n' +\n        '- Use ONLY numbers from problem\\n' +\n        '- 1-2 sentences\\n\\n'\n      :\n        '## START SCAFFOLDING (break down problem):\\n' +\n        'Break problem into first small step.\\n' +\n        '\\n' +\n        ($json.attempt_count == 1 ? '- Start conceptual: \"What does -3 mean?\"\\n' :\n         $json.attempt_count == 2 ? '- Guide step-by-step: \"Let\\'s start at -3 on the number line\"\\n' :\n         '- Walk through most steps, leave only final step for them\\n'\n        ) +\n        '- 1-2 sentences, encouraging tone\\n' +\n        '\\nEXAMPLE: \"Let\\'s work together! What does -3 mean?\"\\n\\n'\n    ) +\n    '\\n'\n  : $json.category == 'off_topic' ?\n    'You are a patient, encouraging math tutor for grades 3-5 (ages 8-10).\\n\\nCRITICAL GROUNDING RULES (apply to ALL responses):\\n\u2713 Use ONLY numbers from this problem: ' + $json.current_problem.text + '\\n\u2713 NEVER make up different numbers, examples, or scenarios\\n\u2713 If problem is \"-3 + 5\", use ONLY -3, +, and 5\\n\u2713 Verify before responding: Are all numbers from the actual problem? \u2713\\n\\nCONTEXT:\\nProblem: ' + $json.current_problem.text + '\\nCorrect Answer: ' + $json.current_problem.correct_answer + '\\nStudent Said: \"' + $json.message + '\" (unrelated to problem)\\n' +\n    '\\nRecent Conversation:\\n' + ($json.chat_history || 'First interaction') + '\\n\\n---\\n\\nSTRATEGY - REDIRECT:\\n' +\n    '- Brief acknowledgment if appropriate\\n' +\n    '- Gently redirect to the math problem\\n' +\n    '- 1 sentence, warm friendly tone (not scolding)\\n' +\n    '\\nEXAMPLE: \"Let\\'s save that for later! What\\'s your answer?\"\\n\\n'\n  : $json.category == 'scaffold_progress' ?\n    'You are a patient, encouraging math tutor for grades 3-5 (ages 8-10).\\n\\nCRITICAL GROUNDING RULES (apply to ALL responses):\\n\u2713 Use ONLY numbers from this problem: ' + $json.current_problem.text + '\\n\u2713 NEVER make up different numbers, examples, or scenarios\\n\u2713 If problem is \"-3 + 5\", use ONLY -3, +, and 5\\n\u2713 Verify before responding: Are all numbers from the actual problem? \u2713\\n\\nCONTEXT:\\nProblem: ' + $json.current_problem.text + '\\nCorrect Answer: ' + $json.current_problem.correct_answer + '\\nStudent\\'s Scaffolding Response: \"' + $json.message + '\" \u2713 CORRECT\\n' +\n    'Synthesis Action: ' + ($json.synthesis_action || 'continue') + '\\n' +\n    ($json.synthesis_hint ? 'Synthesis Hint: ' + $json.synthesis_hint + '\\n' : '') +\n    '\\nRecent Conversation:\\n' + ($json.chat_history || 'First interaction') + '\\n\\n---\\n\\nSTRATEGY - SCAFFOLD PROGRESS:\\n' +\n    '\\n1. ACKNOWLEDGE: \"Yes!\" or \"Right!\" (choose ONE)\\n' +\n    '\\n2. CHECK: Did student just solve the MAIN problem?\\n' +\n    '\\n' +\n    '   STEP A - Extract any numeric answer from student message:\\n' +\n    '   Student said: \"' + $json.message + '\"\\n' +\n    '   Look for answer phrases:\\n' +\n    '   - \"I think it\\'s [NUMBER]\" \u2192 extract NUMBER\\n' +\n    '   - \"the answer is [NUMBER]\" \u2192 extract NUMBER\\n' +\n    '   - \"it\\'s [NUMBER]\" \u2192 extract NUMBER\\n' +\n    '   - \"[NUMBER]\" or \"[NUMBER]?\" \u2192 extract NUMBER\\n' +\n    '   - \"two\", \"negative 3\", \"minus 2\" \u2192 convert to numeric\\n' +\n    '   - If no number found \u2192 student gave conceptual answer, NOT main problem\\n' +\n    '\\n' +\n    '   STEP B - Compare extracted number to correct answer:\\n' +\n    '   Correct answer: ' + $json.current_problem.correct_answer + '\\n' +\n    '   Does extracted number match? (\"2\" = \"two\" = \"2.0\", \"-3\" = \"negative 3\")\\n' +\n    '\\n' +\n    '   IF MATCH FOUND \u2192 Student solved the main problem:\\n' +\n    '   - Celebrate enthusiastically: \"You solved it! ' + $json.current_problem.text + ' = [ANSWER]\"\\n' +\n    '   - 2-3 sentences, excited tone\\n' +\n    '\\n' +\n    '   IF NO MATCH (or no number found) \u2192 Continue scaffolding:\\n' +\n    '   - Student gave conceptual answer (\"adding\", \"move right\", etc.)\\n' +\n    '   - OR gave wrong numeric answer\\n' +\n    '   - Continue teaching toward main problem\\n' +\n    '\\n' +\n    '   If synthesis_action == \"synthesize\":\\n' +\n    '   - Use the synthesis hint provided above\\n' +\n    '   - Rephrase naturally in grade 3-5 language\\n' +\n    '   - EXAMPLE: \"Right! So where do you end up?\"\\n' +\n    '\\n' +\n    '   If synthesis_action == \"continue\":\\n' +\n    '   - Acknowledge their conceptual answer\\n' +\n    '   - Ask next step toward the main problem\\n' +\n    '   - DON\\'T re-explain what they just said\\n' +\n    '   - EXAMPLE: \"Yes! So ' + $json.current_problem.text + ' means... (continue)\"\\n' +\n    '\\n1-2 sentences total\\n\\n'\n  :\n    'You are a patient, encouraging math tutor for grades 3-5 (ages 8-10).\\n\\nCRITICAL GROUNDING RULES (apply to ALL responses):\\n\u2713 Use ONLY numbers from this problem: ' + $json.current_problem.text + '\\n\u2713 NEVER make up different numbers, examples, or scenarios\\n\u2713 If problem is \"-3 + 5\", use ONLY -3, +, and 5\\n\u2713 Verify before responding: Are all numbers from the actual problem? \u2713\\n\\nCONTEXT:\\nProblem: ' + $json.current_problem.text + '\\nCorrect Answer: ' + $json.current_problem.correct_answer + '\\nStudent\\'s Response: \"' + $json.message + '\"\\n' +\n    '\\nRecent Conversation:\\n' + ($json.chat_history || 'First interaction') + '\\n\\n---\\n\\nFALLBACK (unknown category: ' + $json.category + '):\\n' +\n    'Provide helpful encouragement and ask student to try again.\\n' +\n    '1-2 sentences\\n\\n'\n}}\n\n---\n\nCRITICAL QUALITY RULES:\n\nAGE-APPROPRIATE LANGUAGE (grades 3-5):\n\u2713 Simple words: \"think\", \"check\", \"size\"\n\u2713 Short sentences: 5-12 words each\n\u2713 Conversational, warm, encouraging tone\n\nCONCRETE EXAMPLES (only if needed):\n\u2713 Number line using ONLY problem numbers\n\u2713 Real-world analogies using ONLY problem numbers\n\u2713 NO abstract explanations\n\u2713 NEVER create examples with different numbers\n\nANTI-LOOP PROTECTION:\n\u2713 Read conversation history carefully: {{ $json.chat_history }}\n\u2713 If question asked before, rephrase or try different angle\n\u2713 Don't repeat failed strategies\n\nFORMATTING:\n\u2713 DO NOT prefix with \"Tutor:\", \"Assistant:\", or any label\n\u2713 Respond directly as if speaking to student\n\u2713 1-3 sentences maximum (be concise!)\n\n---\n\nYour response:",
              "role": "system"
            }
          ]
        },
        "options": {
          "maxTokens": 250,
          "temperature": 0.3
        }
      },
      "id": "c1f2379f-61a8-4161-9f83-e7b4ed1ac6e0",
      "name": "Response: Unified1",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        3840,
        2560
      ],
      "credentials": {
        "openAiApi": {
          "id": "IsfTAJGtC8cYJaRq",
          "name": "OpenAi account"
        }
      },
      "notes": "UNIFIED: Handles all 6 categories + scaffolding + teach-back with comprehensive prompt"
    },
    {
      "parameters": {
        "jsCode": "const problem = $json.current_problem.text;\nconst correctAnswer = $json.current_problem.correct_answer;\nconst studentMessage = $json.message;\nconst chatHistory = $json.chat_history || '';\n\n// Build prompt for synthesis detection\nconst prompt = `You are a scaffolding progress analyzer for a math tutor.\n\nCONTEXT:\nMain Problem: ${problem}\nCorrect Answer: ${correctAnswer}\nStudent's Latest Response: \"${studentMessage}\" (validated as correct scaffolding answer)\n\nRecent Conversation:\n${chatHistory}\n\n---\n\nYOUR TASK: Decide if it's time to SYNTHESIZE (combine sub-answers) or CONTINUE SCAFFOLDING.\n\nSYNTHESIS CRITERIA:\n\u2713 Student has answered 2+ related sub-questions correctly\n\u2713 Sub-answers can be combined to reach final answer\n\u2713 Tutor is repeating questions (same semantic meaning, different wording)\n\u2713 Student gave same answer twice (indicates loop)\n\nCONTINUE CRITERIA:\n\u2713 Only 1 sub-answer collected so far\n\u2713 Current sub-answer doesn't connect to previous ones\n\u2713 More intermediate steps needed before synthesis\n\n---\n\nANALYSIS STEPS:\n\n1. EXTRACT SUB-ANSWERS from chat history:\n   - Look for student responses that were acknowledged as correct\n   - Identify what each sub-answer represents (e.g., \"3 steps\", \"common denominator 4\")\n\n2. CHECK FOR LOOPS:\n   - Did tutor ask essentially the same question twice?\n   - Did student give the same answer twice?\n   - Example: \"How many steps from 0 to 5?\" then \"Count steps to 5\" = SAME QUESTION\n\n3. EVALUATE READINESS:\n   - Can sub-answers be combined to reach the final answer?\n   - Example: Sub-answers \"3\" and \"5\" for problem \"-3 + 5\" \u2192 YES, synthesize\n   - Example: Only one sub-answer \u2192 NO, continue\n\n4. GENERATE SYNTHESIS HINT (if synthesizing):\n   - Number line: \"You moved X steps then Y more. Where are you now?\"\n   - Fractions: \"You have X/Y + Z/Y. What's the numerator?\"\n   - Word problem: \"A has X, gets Y. What's the total?\"\n\n---\n\nOUTPUT FORMAT (valid JSON only):\n\n{\n  \"action\": \"synthesize\" OR \"continue\",\n  \"reason\": \"brief explanation of decision\",\n  \"sub_answers\": [\"array\", \"of\", \"collected\", \"sub\", \"answers\"],\n  \"synthesis_hint\": \"specific question to ask (only if action=synthesize, else empty string)\"\n}\n\nEXAMPLES:\n\nExample 1 - SYNTHESIZE:\nProblem: \"-3 + 5 = ?\"\nSub-answers: [\"3 steps from -3 to 0\", \"5 steps from 0 to 5\"]\nOutput: {\n  \"action\": \"synthesize\",\n  \"reason\": \"Student answered both sub-questions (3 and 5), ready to combine for final position\",\n  \"sub_answers\": [\"3\", \"5\"],\n  \"synthesis_hint\": \"You moved 3 steps right to get to 0, then 5 more steps right. Where do you end up?\"\n}\n\nExample 2 - CONTINUE:\nProblem: \"1/4 + 1/2 = ?\"\nSub-answers: [\"4\" (common denominator)]\nOutput: {\n  \"action\": \"continue\",\n  \"reason\": \"Only one sub-answer (common denominator), still need to convert fractions\",\n  \"sub_answers\": [\"4\"],\n  \"synthesis_hint\": \"\"\n}\n\nExample 3 - SYNTHESIZE (loop detected):\nProblem: \"-3 + 5 = ?\"\nLast tutor question: \"How many steps from 0 to 5?\"\nStudent answer: \"5\"\nPrevious occurrence: Tutor asked \"Count steps to 5\" and student said \"5 steps\"\nOutput: {\n  \"action\": \"synthesize\",\n  \"reason\": \"Loop detected - tutor asking same question with different wording, student already answered\",\n  \"sub_answers\": [\"3\", \"5\"],\n  \"synthesis_hint\": \"Great! You found 3 steps and 5 steps. Now put them together - where do you land?\"\n}\n\n---\n\nNOW ANALYZE THE CONTEXT ABOVE AND OUTPUT VALID JSON:`;\n\n// Return the prompt for the LLM call\nreturn {\n  json: {\n    prompt: prompt,\n    current_problem: $json.current_problem,\n    message: studentMessage,\n    chat_history: chatHistory\n  }\n};\n"
      },
      "id": "76ab9a1a-7611-4128-9978-fef6fe01b92e",
      "name": "Synthesis Detector1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3584,
        2560
      ],
      "notes": "Detects when to synthesize scaffolding sub-answers vs continue asking sub-questions"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "messages": {
          "values": [
            {
              "content": "={{ $json.prompt }}"
            }
          ]
        },
        "options": {
          "maxTokens": 150,
          "temperature": 0.1
        }
      },
      "id": "0a056b9b-9b2d-491e-95db-64053053377b",
      "name": "Synthesis LLM1",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        3680,
        2560
      ],
      "credentials": {
        "openAiApi": {
          "id": "IsfTAJGtC8cYJaRq",
          "name": "OpenAi account"
        }
      },
      "notes": "LLM call to analyze scaffolding progress and decide synthesis vs continue"
    },
    {
      "parameters": {
        "jsCode": "// Parse synthesis detector output\nconst llmResponse = $json.message?.content || $json.text || $json.response || '';\nconst parsed = JSON.parse(llmResponse);\n\n// Get original data from Build Response Context (contains category, etc.)\nconst originalData = $('Build Response Context1').first().json;\n\nreturn {\n  json: {\n    ...originalData,              // Preserve all original fields including category\n    ...parsed,                    // Add synthesis fields\n    synthesis_action: parsed.action,\n    synthesis_hint: parsed.synthesis_hint || ''\n  }\n};"
      },
      "id": "cdae2d69-8ae9-481b-a62d-0156ff019e4a",
      "name": "Parse Synthesis Decision1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3776,
        2560
      ],
      "notes": "Parse JSON output from synthesis detector"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Normalize input1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format for Routing1": {
      "main": [
        [
          {
            "node": "Build Response Context1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch: Scaffolding Active?1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format for Routing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Classification1": {
      "main": [
        [
          {
            "node": "Switch: Scaffolding Active?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Verify Answer1": {
      "main": [
        [
          {
            "node": "Parse Classification1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM: Extract Intent & Value1": {
      "main": [
        [
          {
            "node": "Code: Verify Answer1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Tool: Verify Main Answer1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Tool: Validate Scaffolding1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Agent Context1": {
      "main": [
        [
          {
            "node": "LLM: Extract Intent & Value1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Debug: Execution Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Parse Agent Output1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Agent Output1": {
      "main": [
        [
          {
            "node": "Build Response Context1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Response Context1": {
      "main": [
        [
          {
            "node": "Route by Category1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Trigger1": {
      "main": [
        [
          {
            "node": "Normalize input1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize input1": {
      "main": [
        [
          {
            "node": "Redis: Get Session1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Session1": {
      "main": [
        [
          {
            "node": "Prepare Agent Context1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Category1": {
      "main": [
        [
          {
            "node": "Response: Unified1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Debug: Before Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response: Unified1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Debug: Before Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response: Unified1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Debug: Before Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response: Unified1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Debug: Before Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response: Unified1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Debug: Before Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response: Unified1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Debug: Before Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Synthesis Detector1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Session & Format Response1": {
      "main": [
        [
          {
            "node": "Redis: Save Session1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis: Get Session1": {
      "main": [
        [
          {
            "node": "Load Session1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis: Save Session1": {
      "main": [
        [
          {
            "node": "Webhook Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response: Unified1": {
      "main": [
        [
          {
            "node": "Update Session & Format Response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Synthesis Detector1": {
      "main": [
        [
          {
            "node": "Synthesis LLM1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Synthesis LLM1": {
      "main": [
        [
          {
            "node": "Parse Synthesis Decision1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Synthesis Decision1": {
      "main": [
        [
          {
            "node": "Response: Unified1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Debug: Before Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "7e464de5-80c1-463f-8062-8b5466e12e8f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "15fdefe217dd497a3644ac7579dc52a8d91ba7b8a26ac0fbdc9f2ffe89ed0a93"
  },
  "id": "Ar0sDK9eGPw0IIIM",
  "tags": []
}